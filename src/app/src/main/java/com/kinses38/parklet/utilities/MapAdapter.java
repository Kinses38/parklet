package com.kinses38.parklet.utilities;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.navigation.NavDirections;
import androidx.navigation.Navigation;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.gms.maps.model.LatLng;
import com.kinses38.parklet.R;
import com.kinses38.parklet.data.model.entity.Property;
import com.kinses38.parklet.view.ui.fragments.MapFragmentDirections;

import java.util.ArrayList;
import java.util.List;

/**
 * Adapter and MapViewHolder for use with the MapViews RecyclerView. Displays properties corresponding to the map pins.
 */
public class MapAdapter extends RecyclerView.Adapter<MapAdapter.MapViewHolder> {

    private Activity context;
    private List<Property> properties;

    /**
     * ViewHolder describes the item view and binds the layouts textviews/buttons to the viewholders instance.
     */
    static class MapViewHolder extends RecyclerView.ViewHolder {
        TextView rv_house_address, rv_daily_rate, rv_available_booking, rv_weekend_booking;
        ImageButton rv_map_booking_button;

        MapViewHolder(@NonNull View mapView) {
            super(mapView);
            rv_house_address = mapView.findViewById(R.id.rv_house_address);
            rv_daily_rate = mapView.findViewById(R.id.rv_total_price);
            rv_available_booking = mapView.findViewById(R.id.booking_dates);
            rv_weekend_booking = mapView.findViewById(R.id.rv_owner_name);
            rv_map_booking_button = mapView.findViewById(R.id.rv_map_booking_button);
        }
    }

    public MapAdapter(Activity context) {
        this.context = context;
        this.properties = new ArrayList<>();
    }

    @NonNull
    @Override
    public MapAdapter.MapViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View root = LayoutInflater.from(context).inflate(R.layout.map_property_recycler, parent, false);
        return new MapViewHolder(root);
    }

    /**
     * Binds value of property to the current viewholder object.
     * Sets onclick listener for booking button.
     *
     * @param viewHolder the current Item View
     * @param position   the position of the property in the recyclerview/arraylist.
     */
    @SuppressLint("DefaultLocale")
    @Override
    public void onBindViewHolder(@NonNull MapAdapter.MapViewHolder viewHolder, int position) {
        Property property = properties.get(position);
        //TODO break addressline up into two for formatting.
        viewHolder.rv_house_address.setText(String.format("%s \n%s", context.getText(R.string.house_address), property.getAddressLine()));
        viewHolder.rv_daily_rate.setText(String.format("%s %.2f", context.getString(R.string.daily_rate), property.getDailyRate()));
        //TODO Parse to yes
        viewHolder.rv_available_booking.setText(String.format("%s %s", context.getString(R.string.available_to_book), property.getTakingBookings()));
        viewHolder.rv_weekend_booking.setText(String.format("%s %s", context.getString(R.string.available_weekends), property.getWeekendBookings()));
        viewHolder.rv_map_booking_button.setOnClickListener(v -> {
            /*Autogenerated class from NavComponentsSafeArgs
              Passes property the user is interested in to the booking fragment page */
            //https://developer.android.com/guide/navigation/navigation-pass-data
            NavDirections action = MapFragmentDirections.actionNavMapToNavBooking(property);
            Navigation.findNavController(v).navigate(action);
        });
    }

    public void refreshList(List<Property> newProperties) {
        this.properties = newProperties;
        notifyDataSetChanged();
    }

    @Override
    public int getItemCount() {
        return properties.size();
    }

    public Property getCurrentItem(int position) {
        return properties.get(position);
    }

    /**
     * Helper function to scroll the recyclerview to a certain property when the user taps the
     * corresponding map pin for that property
     * @param latLng the latlng of the property to match the property viewholder to the pin version.
     * @return the position of the property to scroll to.
     */
    public int findItem(LatLng latLng) {
        Property matchingProperty;
        for (Property p : properties) {
            if (p.getLatLng().equals(latLng)) {
                matchingProperty = p;
                return properties.indexOf(matchingProperty);
            }
        }
        return -1;
    }
}
